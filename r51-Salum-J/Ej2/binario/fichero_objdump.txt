
binario/fichero.elf:     formato del fichero elf32-i386
binario/fichero.elf
arquitectura: i386, opciones 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
dirección de inicio 0x0000f800

Encabezado del Programa:
    LOAD off    0x00001000 vaddr 0xffff0000 paddr 0xffff0000 align 2**12
         filesz 0x000000f6 memsz 0x000000f6 flags r-x
    LOAD off    0x00002000 vaddr 0x0000f000 paddr 0xfffff000 align 2**12
         filesz 0x00000fff memsz 0x00000fff flags rw-
    LOAD off    0x00002fff vaddr 0x0000ffff paddr 0xffffffff align 2**12
         filesz 0x00000001 memsz 0x00000001 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .codigo_kernel32 000000f6  ffff0000  ffff0000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .codigo32     00000029  0000f000  fffff000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .codigo16     00000026  0000f800  fffff800  00002800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .tablas       00000026  0000fd00  fffffd00  00002d00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .codigo_reset 00000005  0000fff0  fffffff0  00002ff0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fill_rom16   0000000a  0000fff5  fffffff5  00002ff5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .end_rom16    00000001  0000ffff  ffffffff  00002fff  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .comment      00000034  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
ffff0000 l    d  .codigo_kernel32	00000000 .codigo_kernel32
0000f000 l    d  .codigo32	00000000 .codigo32
0000f800 l    d  .codigo16	00000000 .codigo16
0000fd00 l    d  .tablas	00000000 .tablas
0000fff0 l    d  .codigo_reset	00000000 .codigo_reset
0000fff5 l    d  .fill_rom16	00000000 .fill_rom16
0000ffff l    d  .end_rom16	00000000 .end_rom16
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 pantalla.c
00000000 l    df *ABS*	00000000 src/kernel.s
ffff00c4 l       .codigo_kernel32	00000000 const_string
ffff00ce l       .codigo_kernel32	00000000 color
ffff00f3 l       .codigo_kernel32	00000000 ACA
00000000 l    df *ABS*	00000000 src/start32.s
0000f01a l       .codigo32	00000000 start32_launcher.stack_init
00000000 l    df *ABS*	00000000 src/start16.s
0000f81d l       .codigo16	00000000 flush_prefetch_queue
00000000 l    df *ABS*	00000000 src/tablas.s
0000fd00 l       .tablas	00000000 GDT
00000000 l       *ABS*	00000000 NULL_SEL
00000020 l       *ABS*	00000000 GDT_LENGHT
00000000 l    df *ABS*	00000000 src/reset.s
0000fff0 l       .codigo_reset	00000000 reset_inic
ffff0035 g     F .codigo_kernel32	0000008f print
00000018 g       *ABS*	00000000 DS_SEL
00070000 g       *ABS*	00000000 __STACK_START_32
0000f000 g       *ABS*	00000000 vma_inic32
00009000 g       *ABS*	00000000 __STACK_START_16
0000f800 g       .codigo16	00000000 start16_inic
0000fff0 g       *ABS*	00000000 vma_reset
ffff00cf g       .codigo_kernel32	00000000 kernel32_init
0007ffff g       *ABS*	00000000 __STACK_END_32
00000010 g       *ABS*	00000000 CS_SEL_32
0000fd00 g       *ABS*	00000000 vma_datos
00003fff g       *ABS*	00000000 __STACK_SIZE_32
0000ffff g       *ABS*	00000000 __STACK_END_16
00000008 g       *ABS*	00000000 CS_SEL_16
0000fd20 g       .tablas	00000000 GDTR
ffff0000 g     F .codigo_kernel32	00000035 clrsrc
0000f800 g       *ABS*	00000000 vma_inic16
ffff0000 g       *ABS*	00000000 vma_kernel32
0000f000 g       .codigo32	00000000 start32_launcher


Contenido de la sección .codigo_kernel32:
 ffff0000 5589e583 ec10c745 fc00800b 00eb1a8b  U......E........
 ffff0010 45fcc700 00000000 8345fc04 8b45fcc7  E........E...E..
 ffff0020 00000000 008345fc 04817dfc 007a0c00  ......E...}..z..
 ffff0030 75dd90c9 c35589e5 83ec1c8b 4d0c8b55  u....U......M..U
 ffff0040 108b4514 884dec88 55e88845 e4c745fc  ..E..M..U..E..E.
 ffff0050 00800b00 807dec4f 7e07b8ff ffffffeb  .....}.O~.......
 ffff0060 610fbe45 ecc1e003 0145fc0f be55e889  a..E.....E...U..
 ffff0070 d0c1e002 01d0c1e0 060145fc eb238b45  ..........E..#.E
 ffff0080 080fb600 0fbed08b 45fc8910 83450801  ........E....E..
 ffff0090 8345fc04 0fbe55e4 8b45fc89 108345fc  .E....U..E....E.
 ffff00a0 04837d08 00740981 7dfcff79 0c0076ce  ..}..t..}..y..v.
 ffff00b0 837d0800 7507b800 000000eb 05b8ffff  .}..u...........
 ffff00c0 ffffc9c3 486f6c61 206d756e 646f0055  ....Hola mundo.U
 ffff00d0 89e5e829 ffffff89 ec5d5589 e568ce00  ...).....]U..h..
 ffff00e0 ffff6a00 6a0068c4 00ffffe8 45ffffff  ..j.j.h.....E...
 ffff00f0 89ec5df4 ebfd                        ..]...          
Contenido de la sección .codigo32:
 f000 66b81800 8ed88ec0 8ee88ee0 8ed0bcff  f...............
 f010 ff070031 c0b9ff3f 000050e2 fdbcffff  ...1...?..P.....
 f020 0700eacf 00ffff10 00                 .........       
Contenido de la sección .codigo16:
 f800 8cc88ed8 0f011620 fdb80090 8ed0bcff  ....... ........
 f810 ff0f20c0 6683c801 0f22c0eb 00b800f0  .. .f...."......
 f820 9c680800 50cf                        .h..P.          
Contenido de la sección .tablas:
 fd00 00000000 00000000 ffff0000 ff9940ff  ..............@.
 fd10 ffff0000 0099cf00 ffff0000 0092cf00  ................
 fd20 1f0000fd 0f00                        ......          
Contenido de la sección .codigo_reset:
 fff0 fafce90b f8                          .....           
Contenido de la sección .fill_rom16:
 fff5 90909090 90909090 9090               ..........      
Contenido de la sección .end_rom16:
 ffff 90                                   .               
Contenido de la sección .comment:
 0000 4743433a 20285562 756e7475 20352e34  GCC: (Ubuntu 5.4
 0010 2e302d36 7562756e 7475317e 31362e30  .0-6ubuntu1~16.0
 0020 342e3429 20352e34 2e302032 30313630  4.4) 5.4.0 20160
 0030 36303900                             609.            

Desensamblado de la sección .codigo_kernel32:
ffff0000 <clrsrc> push   %ebp
ffff0001 <clrsrc+0x1> mov    %esp,%ebp
ffff0003 <clrsrc+0x3> sub    $0x10,%esp
ffff0006 <clrsrc+0x6> movl   $0xb8000,-0x4(%ebp)
ffff000d <clrsrc+0xd> jmp    ffff0029 <clrsrc+0x29>
ffff000f <clrsrc+0xf> mov    -0x4(%ebp),%eax
ffff0012 <clrsrc+0x12> movl   $0x0,(%eax)
ffff0018 <clrsrc+0x18> addl   $0x4,-0x4(%ebp)
ffff001c <clrsrc+0x1c> mov    -0x4(%ebp),%eax
ffff001f <clrsrc+0x1f> movl   $0x0,(%eax)
ffff0025 <clrsrc+0x25> addl   $0x4,-0x4(%ebp)
ffff0029 <clrsrc+0x29> cmpl   $0xc7a00,-0x4(%ebp)
ffff0030 <clrsrc+0x30> jne    ffff000f <clrsrc+0xf>
ffff0032 <clrsrc+0x32> nop
ffff0033 <clrsrc+0x33> leave  
ffff0034 <clrsrc+0x34> ret    
ffff0035 <print> push   %ebp
ffff0036 <print+0x1> mov    %esp,%ebp
ffff0038 <print+0x3> sub    $0x1c,%esp
ffff003b <print+0x6> mov    0xc(%ebp),%ecx
ffff003e <print+0x9> mov    0x10(%ebp),%edx
ffff0041 <print+0xc> mov    0x14(%ebp),%eax
ffff0044 <print+0xf> mov    %cl,-0x14(%ebp)
ffff0047 <print+0x12> mov    %dl,-0x18(%ebp)
ffff004a <print+0x15> mov    %al,-0x1c(%ebp)
ffff004d <print+0x18> movl   $0xb8000,-0x4(%ebp)
ffff0054 <print+0x1f> cmpb   $0x4f,-0x14(%ebp)
ffff0058 <print+0x23> jle    ffff0061 <print+0x2c>
ffff005a <print+0x25> mov    $0xffffffff,%eax
ffff005f <print+0x2a> jmp    ffff00c2 <print+0x8d>
ffff0061 <print+0x2c> movsbl -0x14(%ebp),%eax
ffff0065 <print+0x30> shl    $0x3,%eax
ffff0068 <print+0x33> add    %eax,-0x4(%ebp)
ffff006b <print+0x36> movsbl -0x18(%ebp),%edx
ffff006f <print+0x3a> mov    %edx,%eax
ffff0071 <print+0x3c> shl    $0x2,%eax
ffff0074 <print+0x3f> add    %edx,%eax
ffff0076 <print+0x41> shl    $0x6,%eax
ffff0079 <print+0x44> add    %eax,-0x4(%ebp)
ffff007c <print+0x47> jmp    ffff00a1 <print+0x6c>
ffff007e <print+0x49> mov    0x8(%ebp),%eax
ffff0081 <print+0x4c> movzbl (%eax),%eax
ffff0084 <print+0x4f> movsbl %al,%edx
ffff0087 <print+0x52> mov    -0x4(%ebp),%eax
ffff008a <print+0x55> mov    %edx,(%eax)
ffff008c <print+0x57> addl   $0x1,0x8(%ebp)
ffff0090 <print+0x5b> addl   $0x4,-0x4(%ebp)
ffff0094 <print+0x5f> movsbl -0x1c(%ebp),%edx
ffff0098 <print+0x63> mov    -0x4(%ebp),%eax
ffff009b <print+0x66> mov    %edx,(%eax)
ffff009d <print+0x68> addl   $0x4,-0x4(%ebp)
ffff00a1 <print+0x6c> cmpl   $0x0,0x8(%ebp)
ffff00a5 <print+0x70> je     ffff00b0 <print+0x7b>
ffff00a7 <print+0x72> cmpl   $0xc79ff,-0x4(%ebp)
ffff00ae <print+0x79> jbe    ffff007e <print+0x49>
ffff00b0 <print+0x7b> cmpl   $0x0,0x8(%ebp)
ffff00b4 <print+0x7f> jne    ffff00bd <print+0x88>
ffff00b6 <print+0x81> mov    $0x0,%eax
ffff00bb <print+0x86> jmp    ffff00c2 <print+0x8d>
ffff00bd <print+0x88> mov    $0xffffffff,%eax
ffff00c2 <print+0x8d> leave  
ffff00c3 <print+0x8e> ret    
ffff00c4 <const_string> dec    %eax
ffff00c5 <const_string+0x1> outsl  %ds:(%esi),(%dx)
ffff00c6 <const_string+0x2> insb   (%dx),%es:(%edi)
ffff00c7 <const_string+0x3> popa   
ffff00c8 <const_string+0x4> and    %ch,0x75(%ebp)
ffff00cb <const_string+0x7> outsb  %ds:(%esi),(%dx)
ffff00cc <const_string+0x8> outsl  %fs:(%esi),(%dx)
	...
ffff00cf <kernel32_init> push   %ebp
ffff00d0 <kernel32_init+0x1> mov    %esp,%ebp
ffff00d2 <kernel32_init+0x3> call   ffff0000 <clrsrc>
ffff00d7 <kernel32_init+0x8> mov    %ebp,%esp
ffff00d9 <kernel32_init+0xa> pop    %ebp
ffff00da <kernel32_init+0xb> push   %ebp
ffff00db <kernel32_init+0xc> mov    %esp,%ebp
ffff00dd <kernel32_init+0xe> push   $0xffff00ce
ffff00e2 <kernel32_init+0x13> push   $0x0
ffff00e4 <kernel32_init+0x15> push   $0x0
ffff00e6 <kernel32_init+0x17> push   $0xffff00c4
ffff00eb <kernel32_init+0x1c> call   ffff0035 <print>
ffff00f0 <kernel32_init+0x21> mov    %ebp,%esp
ffff00f2 <kernel32_init+0x23> pop    %ebp
ffff00f3 <ACA> hlt    
ffff00f4 <ACA+0x1> jmp    ffff00f3 <ACA>
